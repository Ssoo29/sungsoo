--함수(function)
--단일행함수와 그룹함수로 구분됨
--SELECT 절에 같이 사용 못함
--
--단일행함수 : 읽은 값이 N개이면, 리턴되는 결과값도 n개임
SELECT EMAIL, UPPER(EMAIL)
FROM EMPLOYEE;

--그룹함수 : n개의 값을 읽어서, 1개의 결과를 리턴함
SELECT SUM(SALARY) 
FROM EMPLOYEE;

SELECT UPPER(EMAIL), SUM(SALARY)
FROM EMPLOYEE;
--그룹함수 결과값이 반듯한 사각형이 아님.
--그룹함수는 WHERE절에서도 사용 못함.


--WHERE절에서는 그룹함수 사용못함.
SELECT EMP_ID, EMP_NAME, SALARY, DEPT_ID, JOB_ID
FROM EMPLOYEE
WHERE SALARY > AVG(SALARY);

--단일행(SINGLE ROW) 함수 
--문자관련 함수 : LENGTH
--LENGTH('문자열리터럴' 문자열이 기록된 컬럼명)
--기록된 문자의 글자갯수가 리턴됨

SELECT LENGTH('ORACLE')
FROM DUAL;

SELECT EMAIL, LENGTH(EMAIL)
FROM EMPLOYEE;

--LENGTH() 함수를 이용해서, CHAR 자료형과 VARCHAR2자료형 차이점 비교 확인
SELECT LENGTH(CHARTYPE), LENGTH(VARCHARTYPE)
FROM COLUMN_LENGTH;

--LENGTHB() 함수
--LENGTHB('문자열리터럴' | 문자열이 기록된 컬럼명)
--기록된 문자의 바이트수를 리턴함
SELECT LENGTHB(CHARTYPE), LENGTHB(VARCHARTYPE)
FROM COLUMN_LENGTH;

--INSTR() 함수
--INSTR('문자열값' | 문자열이 기록된 컬럼명, '찾을문자'[, 찾을시작위치, 몇번째문자])
SELECT EMAIL, INSTR(EMAIL, '@')
FROM EMPLOYEE;

--이메일 주소에서 '@' 문자 바로 뒤에 있는 'k'문자의 위치를 조회함
--단, 뒤에서부터 검색함
SELECT EMAIL, INSTR(EMAIL, 'k',-1,3)
FROM EMPLOYEE;

--함수 중첩사용 가능함
--이메일 주소에서 '.' 바로 뒤 글자의 위치를 조회 단, '.'문자 바로 앞글자부터 검색을 시작하도록 함
SELECT EMAIL, INSTR(EMAIL, 'c', INSTR(EMAIL, '.') - 1)
FROM EMPLOYEE;

-- LPAD / RPAD('문자열값' | 컬럼명, 출력시킬 너비지정[, 남은영역에 채울문자])
SELECT EMAIL 원본, LENGTH(EMAIL) 원본길이, 
    LPAD(EMAIL, 20, '*') 채우기결과,
    LENGTH(LPAD(EMAIL, 20, '*')) 결과길이
FROM EMPLOYEE;

SELECT EMAIL 원본, LENGTH(EMAIL) 원본길이, 
    RPAD(EMAIL, 20, '*') 채우기결과,
    LENGTH(LPAD(EMAIL, 20, '*')) 결과길이
FROM EMPLOYEE;

SELECT LTRIM('   tech')  
FROM DUAL;

SELECT LTRIM('   tech', '.')
FROM DUAL;

SELECT LTRIM('000123', '0')
FROM DUAL;

SELECT LTRIM('123123Tech', '123')
FROM DUAL;

SELECT LTRIM('123123Tech123', '123')
FROM DUAL;

SELECT LTRIM('xyxzyyyTech', 'xyz') 
FROM DUAL;

SELECT LTRIM('6372Tech', '0123456789')
FROM DUAL;

SELECT RTRIM('tech   ')
FROM DUAL;

SELECT RTRIM('tech   ', '.')
FROM DUAL;

SELECT RTRIM('123000', '123')
FROM DUAL;

SELECT RTRIM('Tech123123', '123')
FROM DUAL;

SELECT RTRIM('123Tech123', '123')
FROM DUAL;

SELECT RTRIM('Techxyxzyyy', 'xyz')
FROM DUAL;

SELECT RTRIM('Tech6372', '0123456789')
FROM DUAL;


SELECT TRIM('  tech  ')
FROM DUAL;

SELECT TRIM('a' FROM 'aatechaaa')
FROM DUAL;

SELECT TRIM(LEADING '0' FROM '000123')
FROM DUAL;

SELECT TRIM(TRAILING '1' FROM 'Tech1')
FROM DUAL;

SELECT TRIM(BOTH '1' FROM '123Tech111')
FROM DUAL;

SELECT TRIM(LEADING FROM '  Tech  ')
FROM DUAL;

SELECT TRIM(LEADING FROM '  Tech  ')
FROM DUAL;


--SUBSTR('문자열값 | 컬럼명, 추출시작위치, 추출크기)


SELECT SUBSTR('This is a test', 6 ,2)
FROM DUAL;

SELECT SUBSTR('This is a test', 6)
FROM DUAL;

SELECT SUBSTR('이것은 연습입니다', 3, 4)
FROM DUAL;

SELECT SUBSTR('TechOnTheNet', 1, 4)
FROM DUAL;

SELECT SUBSTR('TechOnTheNet', -3, 3)
FROM DUAL;

SELECT SUBSTR('TechOnTheNet', -6, 3)
FROM DUAL;

SELECT SUBSTR('TechOnTheNet', -8, 2)
FROM DUAL;


--직원들의 주민번호에서 생년, 생월, 생일을 각각 분리 조회
SELECT EMP_NO, SUBSTR(EMP_NO, 1, 2) 생년, SUBSTR(ENP_NO, 3, 2) 생월, SUBSTR(EMP_NO, 5, 2) 생일
FROM EMPLOYEE;

--날짜 데이터에도 적용할 수 있음
--직원들의 입사일에서 입사년도, 입사월, 입사일을 분리 조회
SELECT HIRE_DATE, SUBSTR(HIRE_DATE, 1, 2) 입사년도
                , SUBSTR(HIRE_DATE, 4, 2) 입사월
                , SUBSTR(HIRE_DATE, 7, 2) 입사일
FROM EMPLOYEE;

--SUBSTRB('문자열값' | 컬럼명, 추출할 바이트 시작위치, 추출할 바이트)
SELECT SUBSTR('ORACLE', 3, 2), SUBSTRB('ORACLE', 3, 2) 
FROM DUAL;

--3바이트가 한글자
SELECT SUBSTR('오라클', 2, 3), SUBSTRB('오라클', 4, 6)
FROM DUAL;

--UPPER('문자열값' | 컬럼명) : 대문자로 바꾸는 함수
--LOWER('문자열값' | 컬럼명) : 소문자로 바꾸는 함수
--INITCAP('문자열값' | 컬럼명) : 첫글자만 대문자로 바꾸는 함수
SELECT 'ORACLE', UPPER('ORACLE'), UPPER('oracle'),
        LOWER('ORACLE'), LOWER('oracle'),
        INITCAP('ORACLE'), INITCAP('oracle')
FROM DUAL;

-- 함수의 중첩사용 가능함
-- 함수 안에 값 사용 위치에 함수 사용함.
-- 안쪽 함수가 리턴하는 값을 바깥쪽 함수가 사용한다는 의미임.

-- 직원 정보에서 이름, 아이디 조회
-- 아이디는 이메일에서 아이디를 분리 추출하도록 함
SELECT EMP_NAME 이름, EMAIL 이메일, SUBSTR(EMAIL, 1, INSTR(EMAIL, '@') - 1) 아이디
FROM EMPLOYEE;

-- 직원 테이블에서 사원명, 주민번호를 주회 출력
-- 주민번호는 생년월일-성별만 보이게하고, 나머지는 '*'로 출력되게 함.
SELECT EMP_NAME 이름, EMP_NO 주민번호, RPAD(SUBSTR(EMP_NO, 1, 8), 14, '*')
FROM EMPLOYEE;

--SELECT EMAIL 원본, LENGTH(EMAIL) 원본길이, 
--    RPAD(EMAIL, 20, '*') 채우기결과,
--    LENGTH(LPAD(EMAIL, 20, '*')) 결과길이
--FROM EMPLOYEE;

SELECT ROUND(125.315)
FROM DUAL;

SELECT ROUND(125.315, 0)
FROM DUAL;

SELECT ROUND(125.315, 1)
FROM DUAL;

SELECT ROUND(125.315, -1)
FROM DUAL;

SELECT ROUND(125.315, 3)
FROM DUAL;

SELECT ROUND(125.315, 2)
FROM DUAL;

--직원정보에서 사번, 이름 보너스포인트, 보너스가 포인트가 적용된 연봉
--연봉은 별칭 : 1년급여
--연봉은 천단위에서 반올림
SELECT EMP_ID, EMP_NAME, BONUS_PCT, ROUND(SALARY + (NVL(BONUS_PCT, 0) * SALARY) * 12, -4)  
FROM EMPLOYEE;

--TRUNK(숫자 | 컬럼명 | 계산식, 자릿수)
--자릿수까지의 값을 버리는 함수임. 반올림 없음
SELECT 145.678, TRUNC(145.678), TRUNC(145.678, 1), TRUNC(145.678, -1), TRUNC(145.678, -3)
FROM DUAL;

-- 직원정보에서 직원들의 급여의 평균을 구함
-- 10자리까지 절삭함
SELECT AVG(SALARY), TRUNC(AVG(SALARY), -2), FLOOR(AVG(SALARY))
FROM EMPLOYEE;

--FLOOR(숫자 | 컬럼명 | 계산식)
--소숫점 아래값을 버리는 함수, 정수만드는 함수임
SELECT ROUND(123.45), TRUNC(123.45), FLOOR(123.45)
FROM DUAL;

--ABS(숫자 | 컬럼명 | 계산식)
--절대값 구하는 함수
--음수를 양수로 바꿈
SELECT ABS(123), ABS(-123)
FROM DUAL;

--입사일 - 오늘, 오늘 - 입사일 조회 : 별칭은 총근무일수
--근무일수는 정수로 처리, 모두 양수로 출력되게 함
SELECT HIRE_DATE,
       ABS(FLOOR(HIRE_DATE - SYSDATE)) 총근무일수,
       ABS(FLOOR(SYSDATE - HIRE_DATE))  총근무일수
FROM EMPLOYEE;
--시간을 뺏기때문에 반올림처리 안하면 하루 차이가 생김.

--MOD(나누어지는 수, 나눌 수)
--나누기한 나머지 구하는 함수.
SELECT FLOOR(25 / 7), MOD(25, 7)
FROM DUAL;

--사번이 홀 수인 직원들의 정보 조회
SELECT *
FROM EMPLOYEE
WHERE MOD(EMP_ID, 2) = 1;
